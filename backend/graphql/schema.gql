# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AmountCalculationModel {
  fee_amount: Decimal
  payment_token: PaymentTokenModel
  seller_amount: Decimal
  total_amount: Decimal
}

input ApplicationSettingsInput {
  minting_interval_duration_in_min: String
  per_day_minting_limit: String
  settings_buy_sell_fee_percentage: String
  settings_max_interval_for_buy_sell_offer_in_min: String
  settings_min_interval_for_buy_sell_offer_in_min: String
}

type BlockchainModel {
  chain_id: Int
  currency_symbol: String!
  description: String
  exchange_contract: String
  exchange_contract_name: String
  exchange_contract_version: String
  explorer_url: String
  id: Int!
  logo: String
  network_name: String!
  nft_contract: String
  payment_tokens: [PaymentTokenModel!]
  provider: Int!
  public_rpc_url: String
  slug: String!
  status: Int
}

type BlockchainModelEdge {
  cursor: String!
  node: BlockchainModel!
}

type BlockchainStaffConnection {
  edges: [BlockchainStaffModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type BlockchainStaffModel {
  api_key: String
  chain_id: Int
  currency_symbol: String!
  description: String
  exchange_contract: String
  exchange_contract_name: String
  exchange_contract_version: String
  explorer_url: String
  id: Int!
  logo: String
  network_name: String!
  nft_contract: String
  payment_tokens: [PaymentTokenModel!]
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

type BlockchainStaffModelEdge {
  cursor: String!
  node: BlockchainStaffModel!
}

type BuyOffer {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  end_date: Date!
  fee_amount: Decimal!
  fee_percentage: Float!
  id: Int!
  item: Item
  item_id: Int!
  nonce: String!
  payment_token: PaymentTokenModel
  payment_token_id: Int!
  royalty_address: String
  royalty_amount: Decimal!
  royalty_percentage: Float!
  seller_amount: Decimal!
  signature: String
  start_date: Date!
  status: Int!
  total_amount: Decimal!
  type: Int!
  uid: String!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User
  user_id: Int!
}

type BuyOfferConnection {
  edges: [BuyOfferEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type BuyOfferEdge {
  cursor: String!
  node: BuyOffer!
}

type Category {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  image: String
  status: Int!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

type CategoryConnection {
  edges: [CategoryEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type CategoryEdge {
  cursor: String!
  node: Category!
}

type Collection {
  _count: Count
  banner_image: String
  blockchain: BlockchainModel
  blockchain_id: Int!
  category: Category
  category_id: Int!
  collection_watch_lists: [CollectionWatchList!]
  contract_address: String

  """Identifies the date and time when the object was created."""
  created_at: Date!
  description: String
  display_theme: Int!
  feature_image: String
  featured_collections: FeaturedCollectionList
  id: Int!
  is_featured: Int!
  is_sensitive: Int!
  items: [Item!]
  logo: String!
  metadata: CollectionModelMetadata
  name: String!
  payout_address: String
  royalties: Float
  slug: String!
  status: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User
  user_id: Int
  user_wallet_address: String
  username: String
}

type CollectionConnection {
  edges: [CollectionEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type CollectionEdge {
  cursor: String!
  node: Collection!
}

type CollectionModelMetadata {
  floor_price: PriceConvertModel
  native_token: PaymentTokenModel
  owner_count: Int
  volume: PriceConvertModel
}

input CollectionOrder {
  direction: OrderDirection!
  field: CollectionOrderField!
}

"""Properties by which collection connections can be ordered."""
enum CollectionOrderField {
  created_at
  id
  loyalties
  name
}

type CollectionWatchList {
  collection: Collection!
  collection_id: Int!

  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  status: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User!
  user_id: Int!
}

type CollectionWithMeta {
  collection: Collection!
  floor_price: PriceConvertModel
  is_watched: Boolean!
  itemCount: Int!
  native_token: PaymentTokenModel
  owner_count: Int
  social_links: SocialLinkModel!
  token_mappings: [PaymentTokenMappingModel!]!
  volume: PriceConvertModel
}

type Count {
  items: Int!
}

type CountModel {
  """count"""
  count: Int!
}

input CreateBlockChainDto {
  api_key: String
  currency_symbol: String!
  description: String
  exchange_contract: String
  exchange_contract_name: String
  exchange_contract_version: String
  explorer_url: String
  logo: Upload
  network_name: String!
  nft_contract: String
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

input CreateBuyOfferDto {
  amount: Float!
  end_date: String!
  item_id: Int!
  nonce: String!
  payment_token_id: Int!
  signature: String
  start_date: String!
  type: Int!
}

input CreateCategoryDto {
  imageFile: Upload
  status: Int
  title: String!
}

input CreateCollectionDto {
  banner_image_file: Upload
  blockchain_id: Int!
  category_id: Int!
  contract_address: String
  description: String
  discord_link: String
  display_theme: Int!
  feature_image_file: Upload
  instagram_link: String
  is_sensitive: Int!
  logo_file: Upload!
  medium_link: String
  name: String!
  payment_tokens: String
  payout_address: String
  royalties: Float!
  slug: String
  telegram_link: String
  website_link: String
}

input CreateItemDto {
  collection_id: Int!
  description: String
  external_url: String
  is_unlockable_content: Int!
  media_file: Upload!
  name: String!
  thumbnail_file: Upload
  unlockable_content: String
}

input CreatePaymentTokenDto {
  blockchain_id: Int!
  contract_address: String!
  is_default: Int
  is_wrapable: Int
  logo: Upload
  min_amount_to_execute_auction: Float!
  name: String!
  status: Int
  sync_rate_status: Int
  token_symbol: String!
  total_decimal: Int!
  type: Int!
  usd_rate: Float
}

input CreateSellOfferDto {
  amount: Float!
  end_date: String!
  item_id: Int!
  nonce: String!
  payment_token_id: Int!
  reserved_address: String
  reserved_price: Int
  signature: String
  start_date: String!
  type: Int!
}

type CreatorEarning {
  collection: Collection
  collection_id: Int!

  """Identifies the date and time when the object was created."""
  created_at: Date!
  exchange: Exchange
  exchange_id: Int!
  id: Int!
  item: Item
  item_id: Int!
  payment_token: PaymentTokenModel
  payment_token_id: Int!
  royalty_address: String
  royalty_amount: Decimal!
  royalty_percentage: Float!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User
  user_id: Int!
}

type CreatorEarningConnection {
  edges: [CreatorEarningEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type CreatorEarningEdge {
  cursor: String!
  node: CreatorEarning!
}

type DashboardModel {
  total_blockchain: Int
  total_collection: Int
  total_income: Float
  total_item: Int
  total_sale_amount: Float
  total_sales: Int
  total_sell_offer: Int
  total_users: Int
}

"""Date custom scalar type. Basically string"""
scalar Date

type DayWiseCountModel {
  date: Date!
  total_count: Int!
}

type DayWisePriceCountModel {
  avg_price: Float!
  date: Date!
  sum_price: Float!
}

"""Decimal custom scalar type. Basically string or number"""
scalar Decimal

type Exchange {
  buy_offer: BuyOffer
  buy_offer_id: Int
  buyer: User
  buyer_id: Int

  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  item: Item
  item_id: Int!
  payment_token: PaymentTokenModel
  payment_token_id: Int!
  sell_offer: SellOffer
  sell_offer_id: Int
  seller: User
  seller_id: Int
  status: Int
  total_amount: Decimal
  transaction_hash: String
  uid: String!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

type ExchangeConnection {
  edges: [ExchangeEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type ExchangeEdge {
  cursor: String!
  node: Exchange!
}

type FeaturedCollectionList {
  collection_id: Int!

  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  order: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

type FileObject {
  name: String!
  type: String!
  url: String!
  variants: [FileVariant!]
}

type FileVariant {
  type: String!
  url: String!
}

input HomepageSettingsInput {
  asset_description: String
  asset_title: String
  banner_description: String
  banner_image: Upload
  banner_title: String
  category_description: String
  category_title: String
  featured_collection_description: String
  featured_collection_title: String
  instruction_add_nfts: String
  instruction_create_collection: String
  instruction_description: String
  instruction_image: Upload
  instruction_list_for_sale: String
  instruction_setup_wallet: String
  instruction_title: String
  resource_description: String
  resource_description_1: String
  resource_description_2: String
  resource_description_3: String
  resource_image_1: Upload
  resource_image_2: Upload
  resource_image_3: Upload
  resource_link_1: String
  resource_link_2: String
  resource_link_3: String
  resource_title: String
  resource_title_1: String
  resource_title_2: String
  resource_title_3: String
  selloffer_description: String
  selloffer_title: String
  top_collection_description: String
  top_collection_title: String
  trending_collection_description: String
  trending_collection_title: String
  video_section_description: String
  video_section_title: String
  video_url: String
}

type Item {
  active_buy: BuyOffer
  active_sell: SellOffer
  buy_offers: [BuyOffer!]
  collection: Collection
  collection_id: Int!
  created_at: Date!
  creator: User
  creator_id: Int!
  description: String
  exchange_in_progress: Exchange
  exchanges: [Exchange!]
  external_url: String
  filetype: String!
  highest_bid: BuyOffer
  id: Int!
  is_minted: Int!
  is_unlockable_content: Int
  item_activities: [ItemActivity!]
  item_favourite_lists: [ItemFavouriteList!]
  like_count: Int!
  media_path: String
  minted_at: Date
  name: String!
  owner: User
  owner_id: Int!
  owner_name: String
  payment_token: PaymentTokenModel
  payment_token_id: Int
  price: Decimal!
  prices: [Price!]
  sell_offers: [SellOffer!]
  slug: String!
  status: Int!
  thumbnail_path: String
  token_id: String
  token_uri: String
  unlockable_content: String
  updated_at: Date
  view_count: Int!
}

type ItemActivitiesConnection {
  edges: [ItemActivityEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type ItemActivity {
  amount: String

  """Identifies the date and time when the object was created."""
  created_at: Date!
  event: Int!
  from: User
  from_id: Int!
  hash: String
  id: Int!
  item: Item
  item_id: Int!
  payment_token: PaymentTokenModel
  payment_token_id: Int!
  status: Int!
  to: User
  to_id: Int

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

type ItemActivityEdge {
  cursor: String!
  node: ItemActivity!
}

type ItemConnection {
  edges: [ItemEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type ItemEdge {
  cursor: String!
  node: Item!
}

type ItemFavouriteList {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  item: Item
  item_id: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User
  user_id: Int!
}

input ItemOrder {
  direction: OrderDirection!
  field: ItemOrderField!
}

"""Properties by which Item connections can be ordered."""
enum ItemOrderField {
  id
  most_favourite
  price
  recently_created
  view
}

type MaxFeaturedCollectionOrderDto {
  max_order: Int!
}

type Mutation {
  StaffLogin(data: StaffLoginInput!): Token!
  acceptOffer(offerId: Int!): Exchange!
  addStaffCollectionToFeatured(collection_id: Int!, order: Int!): ResponseModel!
  adminFileUpload(file: Upload!): FileObject!
  applicationSettingsSave(data: ApplicationSettingsInput!): ResponseModel!
  buyNow(offerId: Int!): Exchange!
  cancelBuyOffer(sell_uid: String!): ResponseModel!
  cancelExchange(exchangeId: Int!): ResponseModel!
  cancelSellOffer(sell_uid: String!): ResponseModel!
  cancelTransfer(transfer_id: Int!): ResponseModel!
  changePassword(data: ResetPasswordInput!): ResponseMessageWithStatusModel!
  changeStaffPassword(data: ResetPasswordInput!): ResponseModel!
  collectionWatchListToggle(collectionId: Int!): ResponseModel!
  createBlockchain(data: CreateBlockChainDto!): ResponseModel!
  createBuyOffer(data: CreateBuyOfferDto!): BuyOffer!
  createCategory(data: CreateCategoryDto!): ResponseModel!
  createCollection(data: CreateCollectionDto!): Collection!
  createItem(data: CreateItemDto!): Item!
  createPaymentToken(data: CreatePaymentTokenDto!): ResponseModel!
  createRole(data: roleInput!): ResponseModel!
  createSellOffer(data: CreateSellOfferDto!): SellOffer!
  createStaff(data: StaffCreateInput!): ResponseModel!
  createTransfer(item_id: Int!, to_address: String!): Transfer!
  deleteBlockchain(id: Int!): ResponseModel!
  deleteCategory(id: Int!): ResponseModel!
  deleteCollection(collectionId: Int!): ResponseModel!
  deletePaymentToken(id: Int!): ResponseModel!
  deleteRole(id: Int!): ResponseModel!
  deleteStaff(id: Int!): ResponseModel!
  finishExchang(exchangeId: Int!, transactionHash: String!): ResponseModel!
  finishTransfer(transaction_hash: String!, transfer_id: Int!): ResponseModel!
  generalSettingsSave(data: generalSettingsInput!): ResponseModel!
  generateLoginMessage(wallet_address: String!): WalletLoginMessage!
  homepageSettingsSave(data: HomepageSettingsInput!): ResponseModel!
  itemFavouriteListToggle(item_id: Int!): CountModel!
  itemReMint(activity_id: Int!): ResponseModel!
  itemViewCount(item_id: Int!): CountModel!
  logoSettingsSave(data: logoSettingsInput!): ResponseModel!
  mailSettingsSave(data: mailSettingsInput!): ResponseModel!
  refreshToken(token: String!): Token!
  removeStaffCollectionFromFeatured(collection_id: Int!): ResponseModel!
  resendVerifcationEmail: ResponseModel!
  saveNewsLetterSubscription(email: String!): ResponseModel!
  sendForgetPasswordMail(email: String!): ResponseMessageWithStatusModel!
  sendStaffForgetPasswordMail(email: String!): ResponseModel!
  socialSettingsSave(data: socialSettingsInput!): ResponseModel!
  syncItemOwner(item_id: Int!): ResponseModel!
  syncUsdRates: ResponseModel!
  updateBlockchain(data: UpdateBlockChainDto!, id: Int!): ResponseModel!
  updateBlockchainStatus(id: Int!, status: Int!): ResponseModel!
  updateCategory(data: UpdateCategoryDto!, id: Int!): ResponseModel!
  updateCollection(data: UpdateCollectionDto!, id: Int!): Collection!
  updateItem(data: UpdateItemDto!, id: Int!): Item!
  updateItemStatus(id: Int!, status: Int!): ResponseModel!
  updatePaymentToken(data: UpdatePaymentTokenDto!, id: Int!): ResponseModel!
  updatePaymentTokenStatus(id: Int!, status: Int!): ResponseModel!
  updateProfile(data: UpdateProfileInput!): ResponseModel!
  updateRole(data: roleInput!, id: Int!): ResponseModel!
  updateStaff(data: StaffUpdateInput!, id: Int!): ResponseModel!
  updateStaffCollectionStatus(id: Int!, status: Int!): ResponseModel!
  updateStaffFeaturedCollectionOrder(collection_id: Int!, order: Int!): ResponseModel!
  updateStaffPassword(data: UpdatePasswordInput!): ResponseModel!
  updateStaffProfile(data: StaffUpdateInput!): ResponseModel!
  updateUserStatus(id: Int!, status: Int!): ResponseModel!
  uploadFile(file: Upload!): FileObject!
  usefulLinkSettingsSave(data: UsefulLinkSettingsInput!): ResponseModel!
  userNotificationSettingSave(data: UserNotificationSettingDto!): ResponseModel!
  userVerifyMail(verificationCode: String!): ResponseModel!
  walletLogin(data: WalletLoginInput!): Token!
}

type NativeNwrapTokenModel {
  native_token: PaymentTokenModel
  wrap_token: PaymentTokenModel
}

type NftList {
  ownedNfts: [ownedNft!]!
  pageKey: String
  totalCount: Int!
}

type NotificationEventModel {
  description: String
  id: Int!
  status: Int!
  title: String
}

type NotificationSettingModel {
  events: String
  id: Int!
  user: User
  user_id: Int!
}

input Order {
  direction: String!
  field: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type OrderType {
  name: String!
  type: String!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PaymentTokenConnection {
  edges: [PaymentTokenModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type PaymentTokenMappingModel {
  payment_token: PaymentTokenModel!
}

type PaymentTokenModel {
  blockchain: BlockchainModel
  blockchain_id: Int!
  contract_address: String
  id: Int!
  is_default: Int!
  is_wrapable: Int!
  logo: String
  min_amount_to_execute_auction: Decimal!
  name: String!
  status: Int
  sync_rate_status: Int!
  token_symbol: String
  total_decimal: Int!
  type: Int!
  usd_rate: Decimal!
}

type PaymentTokenModelEdge {
  cursor: String!
  node: PaymentTokenModel!
}

input PaymentTokenOrder {
  direction: OrderDirection!
  field: PaymentTokenOrderField!
}

"""Properties by which payment token connections can be ordered."""
enum PaymentTokenOrderField {
  id
  name
}

type Price {
  amount: Decimal!

  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  item: Float
  item_id: Int!
  payment_token: PaymentTokenModel
  payment_token_id: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

type PriceCalculationModel {
  day_wise_price_count: [DayWisePriceCountModel!]!
  total_avg_price: Float!
  total_sum_price: Float!
}

type PriceConvertModel {
  native_price: Float
  usd_price: Float
}

type Query {
  ItemDetailsBySlugOrTokenId(slugOrTokenId: String!, viewer_id: Int, viewer_wallet_address: String): Item!
  adminFileList: [FileObject!]!
  checkCollectionWatchedByUser(collection_id: Int!, user_id: Int, user_wallet_address: String): Boolean!
  checkItemFavouriteByUser(item_id: Int!, viewer_id: Int, viewer_wallet_address: String): Boolean!
  checkUniqueCollection(id: Int, name: String, slug: String): ResponseModel!
  checkUniqueItem(id: Int, name: String!): ResponseModel!
  checkUniqueUser(email: String, username: String, wallet_address: String!): ResponseModel!
  collectionsByAddress(wallet_address: String!): [Collection!]!

  """collections for item create"""
  collectionsForItem(wallet_address: String!): [Collection!]!
  getAccount(address_or_username: String!): User!
  getAccountByAddress(wallet_address: String!): User!
  getAccountListsPaginate(after: String, before: String, first: Int, last: Int, query: String, skip: Int, totalItem: Int, withItem: Boolean): UserConnection!
  getActiveSellOfferLists(after: String, before: String, first: Int, last: Int, skip: Int): SellOfferConnection!
  getBlockchainById(id: Int!): BlockchainStaffModel!
  getBlockchainDetails(chain_id: Int, id: Int): BlockchainModel
  getBlockchainLists(status: Int): [BlockchainModel!]!
  getBuyOfferById(offerId: Int!): BuyOffer!
  getCategories(status: Int): [Category!]!
  getCategoryById(id: Int!): Category!
  getCategoryList(after: String, before: String, first: Int, last: Int, orderBy: Order, paginateNumber: Int, query: String, skip: Int, status: Int): CategoryConnection!
  getCollectionDetails(slug: String!, user_id: Int, user_wallet_address: String): CollectionWithMeta!
  getCollectionListsPaginate(after: String, before: String, category_id: Int, first: Int, last: Int, orderBy: CollectionOrder, query: String, skip: Int, status: Int, totalItem: Int, user_id: Int, withItem: Boolean): CollectionConnection!
  getCreatorEarningListPaginate(after: String, before: String, collection_id: Int, first: Int, last: Int, skip: Int, user_id: Int): CreatorEarningConnection!
  getDashboardData: DashboardModel!
  getDataForSignBuyOffer(data: CreateBuyOfferDto!): SigDataModel!
  getDataForSignSellOffer(data: CreateSellOfferDto!): SigDataModel!
  getDayWiseCollectionPrice(collection_id: Int!, days: String!): PriceCalculationModel
  getDayWiseItemPrice(days: String!, item_id: Int!): PriceCalculationModel
  getDayWiseSalesCount: [DayWiseCountModel!]!
  getDayWiseUserCount: [DayWiseCountModel!]!
  getFeaturedCollectionList(limit: Int): [Collection!]!
  getFeeByPaymentToken: [AmountCalculationModel!]
  getItemActivities(events: String, item_id: Int!): [ItemActivity!]!
  getItemActivitiesPaginate(after: String, before: String, blockchain_id: [Int!], collection_id: [Int!], event_type: [Int!], first: Int, item_id: Int, last: Int, query: String, skip: Int, user_id: Int): ItemActivitiesConnection!
  getItemLists(after: String, before: String, blockchain_id: [Int!], category_id: [Int!], collection_id: [Int!], creator_id: Int, first: Int, last: Int, max_price: Float, min_price: Float, orderBy: ItemOrder, owner_id: Int, payment_token_id: [Int!], query: String, skip: Int, status: [Int!], viewer_id: Int, viewer_wallet_address: String): ItemConnection!
  getItemUnlockAbleContent(item_slug: String!): String!
  getItemsTokens(item_id: Int!): [PaymentTokenModel!]!
  getNativeNwrapToken(blockchain_id: Int, chain_id: Int): NativeNwrapTokenModel!
  getNftsTest: NftList!
  getNotificationSettings: NotificationSettingModel
  getNotificationSettingsEvent: [NotificationEventModel!]!
  getPaymentTokenById(id: Int!): PaymentTokenModel!
  getRankingList(blockchain_id: Int, days: Int!, limit: Int): [Ranking!]!
  getRole(id: Int!): Role!
  getRoles(orderBy: RoleOrder, query: String): [Role!]!
  getSellOfferLists(after: String, before: String, first: Int, last: Int, skip: Int, type: Int, user_id: Int): SellOfferConnection!
  getSellOfferListsByUser(after: String, before: String, first: Int, last: Int, skip: Int, status: Int!, user_id: Int, user_wallet_address: String): SellOfferConnection!
  getSettingsData(optionGroup: [String!]): [Setting!]!
  getStaff(id: Int!): Staff!
  getStaffBlockchainListPaginate(after: String, before: String, first: Int, last: Int, orderBy: Order, query: String, skip: Int, status: Int): BlockchainStaffConnection!
  getStaffCollectionListsPaginate(after: String, before: String, category_id: Int, first: Int, last: Int, orderBy: CollectionOrder, query: String, skip: Int, status: Int, user_id: Int): CollectionConnection!
  getStaffFeaturedCollectionListPaginate(after: String, before: String, category_id: Int, first: Int, last: Int, query: String, skip: Int, status: Int, user_id: Int): CollectionConnection!
  getStaffFeaturedCollectionMaxOrder: MaxFeaturedCollectionOrderDto!
  getStaffItemActivitiesPaginate(after: String, before: String, blockchain_id: [Int!], collection_id: [Int!], event_type: [Int!], first: Int, item_id: Int, last: Int, query: String, skip: Int, user_id: Int): ItemActivitiesConnection!
  getStaffItemListsPaginate(after: String, before: String, blockchain_id: [Int!], category_id: [Int!], collection_id: [Int!], creator_id: Int, first: Int, last: Int, max_price: Float, min_price: Float, orderBy: ItemOrder, owner_id: Int, payment_token_id: [Int!], query: String, skip: Int, status: [Int!]): ItemConnection!
  getStaffLists(after: String, before: String, first: Int, last: Int, orderBy: StaffOrder, paginateNumber: Int, query: String, skip: Int): StaffConnection!
  getStaffNotFeaturedCollectionLists: [Collection!]!
  getStaffPaymentTokenListPaginate(after: String, before: String, blockchain_id: Int, chain_id: Int, collection_id: Int, first: Int, last: Int, orderBy: Order, query: String, skip: Int, status: Int): PaymentTokenConnection!
  getStaffSalesDataPaginate(after: String, before: String, first: Int, last: Int, query: String, skip: Int): ExchangeConnection!
  getStaffSingleItemBySlugOrTokenId(slugOrTokenId: String!): Item!
  getStaffUserById(id: Int!): User!
  getStaffUserListsPaginate(after: String, before: String, first: Int, last: Int, orderBy: UserOrder, query: String, skip: Int, status: Int): UserConnection!
  getTokenLists(blockchain_id: Int, chain_id: Int): [PaymentTokenModel!]!
  getTokenListsPaginate(after: String, before: String, blockchain_id: Int, chain_id: Int, collection_id: Int, first: Int, last: Int, orderBy: PaymentTokenOrder, query: String, skip: Int, status: Int): PaymentTokenConnection!
  getTopCollectionList(limit: Int): [Collection!]!
  getTransferList(from_user_id: Int, to_user_id: Int): [Transfer!]!
  getTrendingCollectionList(limit: Int): [Collection!]!
  getTrendingItemList(limit: Int, viewer_id: Int, viewer_wallet_address: String): [Item!]!
  getUserBuyOfferLists(after: String, before: String, collection_id: Int, first: Int, last: Int, offer_maker_id: Int, offer_receiver_id: Int, skip: Int): BuyOfferConnection!
  getUserByToken: User!
  getUserItemFavouriteLists(after: String, before: String, first: Int, last: Int, skip: Int, viewer_id: Int, viewer_wallet_address: String): ItemConnection!
  globalSearch(limit: Int, query: String!): SearchModel!
  itemBuyOfferList(item_id: Int!): [BuyOffer!]!
  listFile: [FileObject!]!
  me: User!
  myCollectionWatchList(after: String, before: String, first: Int, last: Int, skip: Int): CollectionConnection!
  staff: Staff!
}

type Ranking {
  blockchain_id: Int!
  collection: Collection
  collection_id: Int!
  created_at: Date!
  floor_price_in_native: Decimal
  floor_price_in_usd: Decimal
  id: Int!
  item_count: Int!
  native_token: PaymentTokenModel
  native_token_id: Int!
  one_day_volume_in_native: Decimal
  one_day_volume_in_usd: Decimal
  one_day_volume_percent: Float
  seven_days_volume_in_native: Decimal
  seven_days_volume_in_usd: Decimal
  seven_days_volume_percent: Float
  thirty_days_volume_in_native: Decimal
  thirty_days_volume_in_usd: Decimal
  thirty_days_volume_percent: Float
  total_volume_in_native: Decimal
  total_volume_in_usd: Decimal
  updated_at: Date
  user: PaymentTokenModel
}

input ResetPasswordInput {
  code: String!
  email: String!
  password: String!
  passwordConfirm: String!
}

type ResponseMessageWithStatusModel {
  """message"""
  message: String!

  """success"""
  success: Boolean!
}

type ResponseModel {
  """custom code"""
  code: Int!

  """message"""
  message: String!

  """success"""
  success: Boolean!
}

type Role {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  name: String!
  permissions: String

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

input RoleOrder {
  direction: String!
  field: String!
}

type SearchModel {
  account: [User!]
  collection: [Collection!]
  item: [Item!]
}

type SellOffer {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  end_date: Date!
  fee_amount: Decimal!
  fee_percentage: Float!
  id: Int!
  item: Item
  item_id: Int!
  nonce: String!
  payment_token: PaymentTokenModel
  payment_token_id: Int!
  reserved_address: String
  reserved_price: Decimal
  royalty_address: String
  royalty_amount: Decimal!
  royalty_percentage: Float!
  seller_amount: Decimal!
  signature: String
  start_date: Date!
  status: Int!
  total_amount: Decimal!
  type: Int!
  uid: String!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  user: User
  user_id: Int!
}

type SellOfferConnection {
  edges: [SellOfferEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type SellOfferEdge {
  cursor: String!
  node: SellOffer!
}

type Setting {
  id: Int!
  option_group: String
  option_key: String!
  option_value: String
  value_type: Int
}

type SigDataModel {
  domainData: domainData!
  offerValue: offerValue!
  type: type!
}

type SocialLinkModel {
  discord_link: String
  facebook_link: String
  id: Int!
  instagram_link: String
  linkedin_link: String
  medium_link: String
  model_id: Int!
  model_type: Int!
  telegram_link: String
  website_link: String
  whatsapp_link: String
}

type Staff {
  avatar: String

  """Identifies the date and time when the object was created."""
  created_at: Date!
  description: String
  email: String!
  emailVerifiedAt: Date
  id: Int!
  isEmailVerified: Boolean!
  name: String!
  phone: String
  resetCode: String
  role: Role
  roleId: Int
  status: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  username: String!
}

type StaffConnection {
  edges: [StaffEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

input StaffCreateInput {
  avatar: String
  description: String
  email: String!
  name: String!
  password: String!
  phone: String
  roleId: Int
  username: String!
}

type StaffEdge {
  cursor: String!
  node: Staff!
}

input StaffLoginInput {
  password: String!
  username: String!
}

input StaffOrder {
  direction: String!
  field: String!
}

input StaffUpdateInput {
  avatarFile: Upload
  description: String

  """Send email field only if it is admin"""
  email: String
  name: String
  password: String
  phone: String
  roleId: Int
  username: String
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT expiration time"""
  expireAt: Date!

  """JWT refresh token"""
  refreshToken: String!
}

type Transfer {
  created_at: Date!
  id: Int!
  item: Item
  item_id: Int!
  status: Int!
  to_address: String!
  to_user: User
  to_user_id: Int!
  transaction_hash: String
  uid: String!
  updated_at: Date!
  user: User
  user_id: Int!
}

input UpdateBlockChainDto {
  api_key: String
  currency_symbol: String!
  description: String
  exchange_contract: String
  exchange_contract_name: String
  exchange_contract_version: String
  explorer_url: String
  logo: Upload
  network_name: String!
  nft_contract: String
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

input UpdateCategoryDto {
  imageFile: Upload
  status: Int
  title: String!
}

input UpdateCollectionDto {
  banner_image_file: Upload
  category_id: Int!
  contract_address: String
  description: String
  discord_link: String
  display_theme: Int!
  feature_image_file: Upload
  instagram_link: String
  is_sensitive: Int!
  logo_file: Upload
  medium_link: String
  name: String!
  payment_tokens: String
  payout_address: String
  royalties: Float!
  slug: String
  telegram_link: String
  website_link: String
}

input UpdateItemDto {
  description: String
  external_url: String
  is_unlockable_content: Int!
  unlockable_content: String
}

input UpdatePasswordInput {
  oldPassword: String!
  password: String!
  passwordConfirm: String!
}

input UpdatePaymentTokenDto {
  blockchain_id: Int!
  contract_address: String!
  is_default: Int
  is_wrapable: Int
  logo: Upload
  min_amount_to_execute_auction: Float!
  name: String!
  status: Int
  sync_rate_status: Int
  token_symbol: String!
  total_decimal: Int!
  type: Int!
  usd_rate: Float
}

input UpdateProfileInput {
  banner_img_file: Upload
  bio: String
  email: String
  instagram_link: String
  name: String
  phone: String
  profile_img_file: Upload
  username: String!
  website_link: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UsefulLinkSettingsInput {
  footer_useful_link_title_1: String
  footer_useful_link_title_2: String
  footer_useful_link_title_3: String
  footer_useful_link_title_4: String
  footer_useful_link_title_5: String
  footer_useful_link_url_1: String
  footer_useful_link_url_2: String
  footer_useful_link_url_3: String
  footer_useful_link_url_4: String
  footer_useful_link_url_5: String
}

type User {
  banner_img: String
  bio: String
  collections: [Collection!]
  createdItems: [Item!]

  """Identifies the date and time when the object was created."""
  created_at: Date!
  email: String
  email_verified_at: Date
  exchangesAsBuyer: [Exchange!]
  exchangesAsSeller: [Exchange!]
  id: Int!
  is_email_verified: Int
  name: String
  notfication_settings: NotificationSettingModel
  ownedItems: [Item!]
  phone: String
  profile_img: String
  reset_code: String
  social_links: SocialLinkModel
  status: Int

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  username: String
  wallet_address: String!
}

type UserConnection {
  edges: [UserEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type UserEdge {
  cursor: String!
  node: User!
}

input UserNotificationSettingDto {
  events: [Int!]
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  id
  name
}

input WalletLoginInput {
  address: String!
  nonce: String!
  signature: String!
}

type WalletLoginMessage {
  login_message: String
  nonce: String!
}

type domainData {
  chainId: Int!
  name: String!
  verifyingContract: String!
  version: String!
}

input generalSettingsInput {
  address: String
  admin_commission: String
  application_title: String
  contract_email: String
  contract_phone: String
  copy_right_text: String
  wallet_address: String
}

input logoSettingsInput {
  app_logo_large: Upload
  app_logo_small: Upload
  favicon_logo: Upload
}

input mailSettingsInput {
  mail_driver: String
  mail_encryption: String
  mail_from_address: String
  mail_from_name: String
  mail_host: String
  mail_password: String
  mail_port: String
  mail_username: String
}

type offerValue {
  _buyer: String
  _expiresAt: Int!
  _feeAmount: String!
  _nftContract: String!
  _nftTokenId: String!
  _nonce: String!
  _paymentTokenContract: String!
  _royaltyAmount: String!
  _royaltyPayTo: String!
  _seller: String
  _sellerAmount: String!
  _startsAt: Int!
  _totalAmount: String!
}

type ownedNft {
  description: String
  id: String
  image: String
  title: String
  tokenUri: String
}

input roleInput {
  name: String!
  permissions: String
}

input socialSettingsInput {
  discord_link: String
  facebook_link: String
  instagram_link: String
  linkedin_link: String
  twitter_link: String
  whatsapp_link: String
}

type type {
  BuyOrder: [OrderType!]
  SellOrder: [OrderType!]
}
