// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  //previewFeatures = ["selectRelationCount"]
}

//generator nestgraphql {
//    provider = "node node_modules/prisma-nestjs-graphql"
//    output = "./@generated/prisma-nestjs-graphql"
//    fields_Validator_from = "class-validator"
//    fields_Validator_input = true
//}

model User {
  id                Int       @id @default(autoincrement())
  wallet_address    String    @unique @db.VarChar(255)
  username          String?   @unique @db.VarChar(255)
  name              String?   @db.VarChar(255)
  profile_img       String?   @db.VarChar(500)
  banner_img        String?   @db.VarChar(500)
  email             String?   @unique @db.VarChar(255)
  reset_code        String?   @db.VarChar(255)
  is_email_verified Int?      @default(0) @db.SmallInt
  email_verified_at DateTime?
  phone             String?   @unique @db.VarChar(255)
  bio               String?
  status            Int       @default(1) @db.SmallInt
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  login_nonces           WalletLoginNonce[]
  collections            Collection[]
  collection_watch_lists CollectionWatchList[]
  creator_earnings       CreatorEarning[]
  ownedItems             Item[]                @relation("myOwnedItems")
  createdItems           Item[]                @relation("myCreatedItems")
  activitesFromMe        ItemActivity[]        @relation("fromTX")
  activitiesToMe         ItemActivity[]        @relation("toTX")
  buy_offers             BuyOffer[]
  sell_offers            SellOffer[]
  exchangesAsSeller      Exchange[]            @relation("seller")
  exchangesAsBuyer       Exchange[]            @relation("buyer")
  item_favourite_lists   ItemFavouriteList[]
  notification_settings  NotificationSetting?
  ranking                Ranking[]

  transfersFromMe Transfer[]
  transfersToMe   Transfer[] @relation("to_user")

  @@map("users")
}

model Item {
  id                    Int       @id @default(autoincrement())
  name                  String    @unique
  slug                  String    @unique
  description           String?   @db.Text
  external_url          String?   @db.VarChar(255)
  media_path            String    @db.VarChar(255)
  thumbnail_path        String?   @db.VarChar(255)
  filetype              String    @default("image") @db.VarChar(40)
  token_uri             String?   @db.VarChar(255)
  token_id              String?   @db.VarChar(255)
  view_count            Int       @default(0)
  like_count            Int       @default(0)
  price                 Decimal   @default(0) @db.Decimal(65, 30)
  payment_token_id      Int?
  is_unlockable_content Int       @default(0) @db.SmallInt
  unlockable_content    String?
  collection_id         Int
  owner_id              Int
  creator_id            Int
  is_minted             Int       @default(0) @db.SmallInt
  status                Int       @default(1) @db.SmallInt
  minted_at             DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  collection           Collection          @relation(fields: [collection_id], references: [id])
  payment_token        PaymentToken?       @relation(fields: [payment_token_id], references: [id])
  owner                User                @relation("myOwnedItems", fields: [owner_id], references: [id])
  creator              User                @relation("myCreatedItems", fields: [creator_id], references: [id])
  buy_offers           BuyOffer[]
  sell_offers          SellOffer[]
  exchanges            Exchange[]
  item_activities      ItemActivity[]
  creator_earnings     CreatorEarning[]
  item_favourite_lists ItemFavouriteList[]
  prices               Price[]

  transfers Transfer[]

  @@map("items")
}

model ItemActivity {
  id               Int      @id @default(autoincrement())
  item_id          Int
  from_id          Int?
  to_id            Int?
  hash             String?
  amount           String?
  payment_token_id Int?
  event            Int      @db.SmallInt
  status           Int      @default(1) @db.SmallInt
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  payment_token PaymentToken? @relation(fields: [payment_token_id], references: [id])
  item          Item          @relation(fields: [item_id], references: [id])
  from          User?         @relation("fromTX", fields: [from_id], references: [id])
  to            User?         @relation("toTX", fields: [to_id], references: [id])

  @@map("item_activities")
}

model Price {
  id               Int      @id @default(autoincrement())
  item_id          Int
  amount           Decimal  @db.Decimal(65, 30)
  payment_token_id Int
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  payment_token PaymentToken @relation(fields: [payment_token_id], references: [id])
  item          Item         @relation(fields: [item_id], references: [id])

  @@map("prices")
}

model BuyOffer {
  id                 Int       @id @default(autoincrement())
  uid                String    @unique @db.VarChar(64)
  signature          String?   @db.VarChar(255)
  nonce              String    @db.VarChar(255)
  type               Int       @db.SmallInt
  item_id            Int
  user_id            Int
  payment_token_id   Int
  total_amount       Decimal   @default(0) @db.Decimal(65, 30)
  seller_amount      Decimal   @default(0) @db.Decimal(65, 30)
  fee_percentage     Float     @default(0)
  fee_amount         Decimal   @default(0) @db.Decimal(65, 30)
  royalty_address    String?   @db.VarChar(255)
  royalty_percentage Float     @default(0)
  royalty_amount     Decimal   @default(0) @db.Decimal(65, 30)
  // sell_offer_id      Int?      @unique
  start_date         DateTime?
  end_date           DateTime?
  status             Int       @db.SmallInt
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt

  item          Item          @relation(fields: [item_id], references: [id])
  user          User          @relation(fields: [user_id], references: [id])
  payment_token PaymentToken? @relation(fields: [payment_token_id], references: [id])
  // sell_offer    SellOffer?    @relation(fields: [sell_offer_id], references: [id])
  exchanges     Exchange[]

  @@map("buy_offers")
}

model SellOffer {
  id                 Int      @id @default(autoincrement())
  uid                String   @unique @db.VarChar(64)
  signature          String?  @db.VarChar(255)
  nonce              String   @db.VarChar(255)
  type               Int      @db.SmallInt
  item_id            Int
  user_id            Int
  payment_token_id   Int
  total_amount       Decimal  @default(0) @db.Decimal(65, 30)
  seller_amount      Decimal  @default(0) @db.Decimal(65, 30)
  fee_percentage     Float    @default(0)
  fee_amount         Decimal  @default(0) @db.Decimal(65, 30)
  royalty_address    String?  @db.VarChar(255)
  royalty_percentage Float    @default(0)
  royalty_amount     Decimal  @default(0) @db.Decimal(65, 30)
  start_date         DateTime
  end_date           DateTime
  status             Int      @db.SmallInt
  reserved_address   String?  @db.VarChar(255)
  reserved_price     Decimal? @db.Decimal(65, 30)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  item          Item?         @relation(fields: [item_id], references: [id])
  user          User?         @relation(fields: [user_id], references: [id])
  payment_token PaymentToken? @relation(fields: [payment_token_id], references: [id])
  // buy_offer     BuyOffer?
  exchanges     Exchange[]

  @@map("sell_offers")
}

model Exchange {
  id               Int      @id @default(autoincrement())
  uid              String   @unique @db.VarChar(64)
  item_id          Int
  payment_token_id Int
  sell_offer_id    Int?
  buy_offer_id     Int?
  seller_id        Int?
  buyer_id         Int?
  total_amount     Decimal  @default(0) @db.Decimal(65, 30)
  transaction_hash String?  @db.VarChar(255)
  status           Int      @default(0) @db.SmallInt
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  sell_offer      SellOffer?       @relation(fields: [sell_offer_id], references: [id])
  buy_offer       BuyOffer?        @relation(fields: [buy_offer_id], references: [id])
  seller          User?            @relation("seller", fields: [seller_id], references: [id])
  buyer           User?            @relation("buyer", fields: [buyer_id], references: [id])
  item            Item?            @relation(fields: [item_id], references: [id])
  payment_token   PaymentToken?    @relation(fields: [payment_token_id], references: [id])
  creatorEarnings CreatorEarning[]

  @@map("exchanges")
}
